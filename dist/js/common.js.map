{"version":3,"sources":["new-scoll-interaction.js"],"names":["commonAnimation","windowWidth","window","innerWidth","offset","document","querySelector","init","gsap","registerPlugin","ScrollTrigger","$","on","to","ease","autoAlpha","onComplete","from","delay","y","stagger","fromTo","opacity"],"mappings":";;;;;;;;AAAA;;;;;;;;AACA;AACA;;IAEMA,e;AACF,+BAAc;AAAA;;AACV,YAAMC,cAAcC,OAAOC,UAA3B;;AAEA,aAAKC,MAAL,GAAc,CAAd;;AAEA,YAAIC,SAASC,aAAT,CAAuB,uBAAvB,CAAJ,EAAqD;AACjD,iBAAKC,IAAL;AACH;AACJ;;;;+BAEM;AACHC,2BAAKC,cAAL,CAAoBC,aAApB;;AAEAC,cAAET,MAAF,EAAUU,EAAV,CAAa,MAAb,EAAqB,YAAW;AAC5BJ,+BAAKK,EAAL,CAAQF,EAAE,cAAF,CAAR,EAA2B,GAA3B,EAAgC;AAC5BG,0BAAM,YADsB;AAE5BC,+BAAW,CAFiB;;AAI5BC,gCAAY,sBAAW;AACnBR,uCAAKS,IAAL,CACIN,EAAE,2BAAF,CADJ,EAEI,CAFJ,EAEO;AACCG,kCAAM,cADP;AAECC,uCAAW,CAFZ;AAGCG,mCAAO,GAHR;AAICC,+BAAG;AAJJ,yBAFP,EAQI,KARJ;;AAWAX,uCAAKS,IAAL,CAAUN,EAAE,qBAAF,CAAV,EAAoC,CAApC,EAAuC;AACnCG,kCAAM,aAD6B;AAEnCI,mCAAO,GAF4B;AAGnCH,uCAAW,CAHwB;AAInCI,+BAAG,EAJgC;AAKnCC,qCAAS,GAL0B;;AAOnCJ,wCAAY,sBAAW;AACnBR,+CAAKa,MAAL,CACI,cADJ,EAEI,GAFJ,EAES;AACDF,uCAAG,EADF;AAEDG,6CAAS,CAFR;AAGDR,0CAAM,cAHL;AAIDM,6CAAS;AAJR,iCAFT,EAOO;AACCD,uCAAG,CADJ;AAECG,6CAAS;AAFV,iCAPP;AAYAd,+CAAKa,MAAL,CACI,eADJ,EAEI,GAFJ,EAES;AACDC,6CAAS;AADR,iCAFT,EAIO;AACCA,6CAAS,CADV;AAECJ,2CAAO;AAFR,iCAJP,EAQI,OARJ;AAUH;AA9BkC,yBAAvC;AAgCH;AAhD2B,iBAAhC;AAkDH,aAnDD;;AAqDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;;;;kBAEUlB,e","file":"common.js","sourcesContent":["import gsap from \"gsap\";\r\n// import $ from \"jquery\";\r\n// import { transform } from \"babel-core\";\r\n\r\nclass commonAnimation {\r\n    constructor() {\r\n        const windowWidth = window.innerWidth;\r\n\r\n        this.offset = 0;\r\n\r\n        if (document.querySelector(\".js-common-animations\")) {\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    init() {\r\n        gsap.registerPlugin(ScrollTrigger);\r\n\r\n        $(window).on(\"load\", function() {\r\n            gsap.to($(\".page-loader\"), 0.5, {\r\n                ease: \"power1.out\",\r\n                autoAlpha: 0,\r\n\r\n                onComplete: function() {\r\n                    gsap.from(\r\n                        $(\"header .header-brand-logo\"),\r\n                        1, {\r\n                            ease: \"power1.InOut\",\r\n                            autoAlpha: 0,\r\n                            delay: 0.2,\r\n                            y: 15,\r\n                        },\r\n                        \"=.2\"\r\n                    );\r\n\r\n                    gsap.from($(\".mb-header-nav > li\"), 1, {\r\n                        ease: \"power.InOut\",\r\n                        delay: 0.2,\r\n                        autoAlpha: 0,\r\n                        y: 15,\r\n                        stagger: 0.2,\r\n\r\n                        onComplete: function() {\r\n                            gsap.fromTo(\r\n                                \".n-gsap-text\",\r\n                                0.8, {\r\n                                    y: 40,\r\n                                    opacity: 0,\r\n                                    ease: \"power1.InOut\",\r\n                                    stagger: 0.3,\r\n                                }, {\r\n                                    y: 0,\r\n                                    opacity: 1,\r\n                                }\r\n                            );\r\n                            gsap.fromTo(\r\n                                \".n-gsap-image\",\r\n                                0.8, {\r\n                                    opacity: 0,\r\n                                }, {\r\n                                    opacity: 1,\r\n                                    delay: 0.6,\r\n                                },\r\n                                \"-=0.1\"\r\n                            );\r\n                        },\r\n                    });\r\n                },\r\n            });\r\n        });\r\n\r\n        // // Scroll of trigger sections\r\n\r\n        // var tl = gsap.timeline({\r\n        //     defaults: { duration: .6, ease: \"power.inOut\", opacity: 0 },\r\n        //     scrollTrigger: {\r\n        //         trigger: \".rec-banner\",\r\n        //         // start: \"top 200px\",\r\n        //         // start: \"top 100px\",\r\n        //         // end: \"+500px\",\r\n        //         // markers: true,\r\n        //     },\r\n        // });\r\n\r\n        // tl.from(\r\n        //         \".gsap-stag .gsap-stag-item\", {\r\n        //             opacity: 0,\r\n        //             delay: 0.3,\r\n        //             y: 15,\r\n        //             stagger: 0.2,\r\n        //         },\r\n        //         \"=\"\r\n        //     )\r\n        //     .from(\r\n        //         \".gsap-client-sec li\", {\r\n        //             // delay: 0.3,\r\n        //             opacity: 0,\r\n        //             y: 20,\r\n        //             stagger: 0.4,\r\n        //         },\r\n        //         \"=\"\r\n        //     )\r\n        //     .from(\r\n        //         \".gsap-sin-img\", {\r\n        //             opacity: 0,\r\n        //         },\r\n        //         \"-=1.3\"\r\n        //     )\r\n        //     .from(\r\n        //         \".rec-wave\", {\r\n        //             // scaleY: 0,\r\n        //             transformOrigin: \"center\",\r\n        //             opacity: 0,\r\n        //         },\r\n        //         \"-=.3\"\r\n        //     );\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // Common interactions\r\n\r\n        // const titles = document.querySelectorAll(\".gsap-section-trig\");\r\n\r\n        // titles.forEach((title, i) => {\r\n        //     let tl11 = gsap.timeline({\r\n        //         defaults: { duration: 0.6, ease: \"power1.inOut\", opacity: 0 },\r\n        //         scrollTrigger: {\r\n        //             trigger: title,\r\n        //             start: \"top 450px\",\r\n        //             // end: \"-600px\",\r\n        //             // markers: true,\r\n        //             // toggleActions: \"play reset play reset\",\r\n        //         },\r\n        //     });\r\n\r\n        //     tl11\r\n        //         .from(\r\n        //             title.querySelectorAll(\".gsap-heading\"), {\r\n        //                 opacity: 0,\r\n        //                 y: 20,\r\n        //             },\r\n        //             \"-=.8\"\r\n        //         )\r\n        //         .from(\r\n        //             title.querySelectorAll(\".gsap-list-item li\"), {\r\n        //                 delay: 0.3,\r\n        //                 opacity: 0,\r\n        //                 stagger: 0.4,\r\n        //             },\r\n        //             \"-=.6\"\r\n        //         )\r\n        //         .from(\r\n        //             title.querySelectorAll(\".gsap-btn-wrap\"), {\r\n        //                 delay: 0.3,\r\n        //                 opacity: 0,\r\n        //             },\r\n        //             \"-=.2\"\r\n        //         )\r\n\r\n\r\n        // });\r\n\r\n        // // Slider interactions\r\n        // const captions = document.querySelectorAll(\".gsap-slider-trig\");\r\n        // captions.forEach((caption, i) => {\r\n        //     let t22 = gsap.timeline({\r\n        //         defaults: { duration: 0.6, ease: \"power1.inOut\", opacity: 0 },\r\n        //         scrollTrigger: {\r\n        //             trigger: caption,\r\n        //             start: \"top bottom\",\r\n        //             // scrub: true,\r\n        //             // markers: true,\r\n        //         },\r\n        //     });\r\n\r\n        //     t22\r\n        //         .from(\r\n        //             caption.querySelectorAll(\".gsap-slider-list .gsap-slider-item\"), {\r\n        //                 delay: 0.3,\r\n        //                 opacity: 0,\r\n        //                 y: 20,\r\n        //                 stagger: 0.4,\r\n        //             },\r\n        //             \"=.5\"\r\n        //         )\r\n        //         .from(\r\n        //             caption.querySelectorAll(\".gsap-slider-wrap\"), {\r\n        //                 delay: 0.3,\r\n        //                 opacity: 0,\r\n        //             },\r\n        //             \"-=1\"\r\n        //         );\r\n        // });\r\n\r\n        // join our team\r\n\r\n        // var thr = gsap.timeline({\r\n        //     defaults: { duration: 0.6, ease: \"power.Out\", opacity: 0 },\r\n        //     scrollTrigger: {\r\n        //         trigger: \".gsap-hero-panel\",\r\n        //         // start: \"top 80%\",\r\n        //         start: \"top 450px\",\r\n        //         // end: \"+500px\",\r\n        //         // markers: true,\r\n        //     },\r\n        // });\r\n\r\n        // thr\r\n        //     .from(\r\n        //         \" .rec-gsap-bg-pri\", {\r\n        //             opacity: 0,\r\n        //             scaleY: 0,\r\n        //             transformOrigin: \"bottom\",\r\n        //         },\r\n        //         \"=.8\"\r\n        //     )\r\n        //     .from(\r\n        //         \".gsap-hero-item\", {\r\n        //             opacity: 0,\r\n        //             delay: 0.3,\r\n        //             y: 20,\r\n        //             stagger: 0.4,\r\n        //         },\r\n        //         \"-=.4\"\r\n        //     )\r\n        //     .from(\r\n        //         \".gsap-blog-sliderwr\", {\r\n        //             opacity: 0,\r\n        //         },\r\n        //         \"-=.2\"\r\n        //     );\r\n    }\r\n}\r\nexport default commonAnimation;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}